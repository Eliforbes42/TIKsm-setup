rbac:
  create: true
  pspEnabled: true
serviceAccount:
  create: true
  name:

replicas: 1

deploymentStrategy: RollingUpdate

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: grafana/grafana
  tag: 5.3.2
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

securityContext:
  runAsUser: 472
  fsGroup: 472

downloadDashboardsImage:
  repository: appropriate/curl
  tag: latest
  pullPolicy: IfNotPresent

## Pod Annotations
# podAnnotations: {}

## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  port: 80
  annotations: {}
  labels: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: false
  # storageClassName: default
  # accessModes:
  #   - ReadWriteOnce
  # size: 10Gi
  # annotations: {}
  # subPath: ""
  # existingClaim:

adminUser: admin
adminPassword: strongpassword

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## Extra environment variables that will be pass onto deployment pods
env: {}

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc
envFromSecret: ""

## Additional grafana server secret mounts
# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: grafana-secret-files
  #   readOnly: true

## Pass the plugins you want installed as a list.
##
plugins: []
  # - digrich-bubblechart-panel
  # - grafana-clock-panel

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: influx
      type: influxdb              
      database: telegraf
      url: http://data-influxdb.kube-system:8086
      access: proxy
      isDefault: true
      label: grafana_datasource
#    apiVersion: 1
#    datasources:
#    - name: Prometheus
#      type: prometheus
#      url: http://prometheus-prometheus-server
#      access: proxy
#      isDefault: true

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default
    - name: 'ds1'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/ds1


## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards:
  default:
    restarts-dashboard:
      json: |
        {
            "__inputs": [
          {
            "name": "influx",
            "label": "influx",
            "description": "",
            "type": "datasource",
            "pluginId": "influxdb",
            "pluginName": "InfluxDB"
          },
          {
            "name": "VAR_PREFIX",
            "type": "constant",
            "label": "prefix",
            "value": "collectd",
            "description": ""
          }
        ],
        "__requires": [
          {
            "type": "grafana",
            "id": "grafana",
            "name": "Grafana",
            "version": "5.3.0"
          },
          {
            "type": "datasource",
            "id": "influxdb",
            "name": "InfluxDB",
            "version": "5.0.0"
          },
          {
            "type": "panel",
            "id": "table",
            "name": "Table",
            "version": "5.0.0"
          }
        ],
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "id": null,
        "iteration": 1540495597649,
        "links": [],
        "panels": [
          {
            "columns": [],
            "datasource": "influx",
            "description": "The number of restarts for each individual container.",
            "fontSize": "100%",
            "gridPos": {
              "h": 13,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "id": 2,
            "links": [],
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "date"
              },
              {
                "alias": "",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "groupBy": [
                  {
                    "params": [
                      "container"
                    ],
                    "type": "tag"
                  }
                ],
                "measurement": "kube_pod_container_status_restarts_total",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "SELECT \"counter\" FROM \"kube_pod_container_status_restarts_total\" WHERE $timeFilter GROUP BY \"container\"",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "table",
                "select": [
                  [
                    {
                      "params": [
                        "counter"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "tags": []
              }
            ],
            "title": "Restarts by Container",
            "transform": "table",
            "transparent": false,
            "type": "table"
          },
          {
            "columns": [],
            "datasource": "influx",
            "fontSize": "100%",
            "gridPos": {
              "h": 5,
              "w": 11,
              "x": 12,
              "y": 0
            },
            "id": 6,
            "links": [],
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "date"
              },
              {
                "alias": "",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "groupBy": [
                  {
                    "params": [
                      "$__interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "orderByTime": "ASC",
                "policy": "default",
                "query": "SELECT sum(\"gauge\") FROM \"kube_pod_container_status_terminated_reason\" WHERE (time >= now() - 10s) GROUP BY \"reason\"",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "table",
                "select": [
                  [
                    {
                      "params": [
                        "value"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    }
                  ]
                ],
                "tags": []
              }
            ],
            "title": "Termination Reasons",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": "influx",
            "description": "The reason that containers are waiting.",
            "fontSize": "100%",
            "gridPos": {
              "h": 8,
              "w": 11,
              "x": 12,
              "y": 5
            },
            "id": 4,
            "links": [],
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "date"
              },
              {
                "alias": "",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "groupBy": [
                  {
                    "params": [
                      "reason"
                    ],
                    "type": "tag"
                  },
                  {
                    "params": [
                      "container"
                    ],
                    "type": "tag"
                  }
                ],
                "measurement": "kube_pod_container_status_waiting_reason",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "SELECT sum(\"gauge\") FROM \"kube_pod_container_status_waiting_reason\" WHERE (time >= now() - 10s) GROUP BY \"reason\"",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "table",
                "select": [
                  [
                    {
                      "params": [
                        "gauge"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "sum"
                    }
                  ]
                ],
                "tags": []
              }
            ],
            "title": "Wait Reasons",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": "influx",
            "fontSize": "100%",
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 13
            },
            "id": 8,
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "date"
              },
              {
                "alias": "",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "groupBy": [
                  {
                    "params": [
                      "pod"
                    ],
                    "type": "tag"
                  },
                  {
                    "params": [
                      "phase"
                    ],
                    "type": "tag"
                  }
                ],
                "measurement": "kube_pod_status_phase",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "SELECT (\"gauge\") FROM \"kube_pod_status_phase\" WHERE (\"gauge\" != 0) AND $timeFilter GROUP BY \"pod\", \"phase\"",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "table",
                "select": [
                  [
                    {
                      "params": [
                        "gauge"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "tags": [
                  {
                    "key": "gauge",
                    "operator": "!=",
                    "value": "0"
                  }
                ]
              }
            ],
            "title": "Panel Title",
            "transform": "table",
            "type": "table"
          }
        ],
        "schemaVersion": 16,
        "style": "dark",
        "tags": [],
        "templating": {
          "list": [
            {
              "auto": false,
              "auto_count": 30,
              "auto_min": "10s",
              "current": {
                "text": "1m",
                "value": "1m"
              },
              "hide": 0,
              "label": null,
              "name": "oneMinute",
              "options": [
                {
                  "selected": false,
                  "text": "now",
                  "value": "now"
                },
                {
                  "selected": true,
                  "text": "1m",
                  "value": "1m"
                }
              ],
              "query": "now() - 1m",
              "refresh": 2,
              "skipUrlSync": false,
              "type": "interval"
            }
          ]
        },
        "time": {
          "from": "now-6h",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ],
          "time_options": [
            "5m",
            "15m",
            "1h",
            "6h",
            "12h",
            "24h",
            "2d",
            "7d",
            "30d"
          ]
        },
        "timezone": "",
        "title": "Restarts Dashboard",
        "uid": "iyFav8Jik",
        "version": 9
      }
    pod-dashboard:
      url: https://raw.githubusercontent.com/Eliforbes42/TIKsm-setup/master/gtikk-charts/grafana/dashboards/pod-metrics_rev2.json
    system-dashboard:
      url: https://raw.githubusercontent.com/Eliforbes42/TIKsm-setup/master/gtikk-charts/grafana/dashboards/telegraf-system-metrics_rev1.json
#restarts-dashboard:
#      json: |
#        {{ (.Files.Glob "dashboards/restarts-dashboard.json") | b64enc | indent 2 }}
#    some-dashboard:
#      json: |
#        $RAW_JSON
#    prometheus-stats:
#      gnetId: 2
#      revision: 2
#      datasource: Prometheus
#    local-dashboard:
#      url: https://example.com/repository/test.json

## Reference to external ConfigMap per provider. Use provider name as key and ConfiMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}
  #ds1: "restarts-dashboard"
#  default: ""

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
## LDAP Authentication can be enabled with the following values on grafana.ini
## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
  # auth.ldap:
  #   enabled: true
  #   allow_sign_up: true
  #   config_file: /etc/grafana/ldap.toml

## Grafana's LDAP configuration
## Templated by the template in _helpers.tpl
## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
## ref: http://docs.grafana.org/installation/ldap/#configuration
ldap:
  # `existingSecret` is a reference to an existing secret containing the ldap configuration
  # for Grafana in a key `ldap-toml`.
  existingSecret: ""
  # `config` is the content of `ldap.toml` that will be stored in the created secret
  config: ""
  # config: |-
  #   verbose_logging = true

  #   [[servers]]
  #   host = "my-ldap-server"
  #   port = 636
  #   use_ssl = true
  #   start_tls = false
  #   ssl_skip_verify = false
  #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana in keys `user` and `password`.
  existingSecret: ""

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
sidecar:
  image: kiwigrid/k8s-sidecar:0.0.3
  imagePullPolicy: IfNotPresent
  resources:
#   limits:
#     cpu: 100m
#     memory: 100Mi
#   requests:
#     cpu: 50m
#     memory: 50Mi
  dashboards:
    enabled: true
    # label that the configmaps with dashboards are marked with
    label: grafana_dashboard
    # folder in the pod that should hold the collected dashboards
    folder: /tmp/dashboards
  datasources:
    enabled: true
    # label that the configmaps with datasources are marked with
    label: grafana_datasource
